// 함수 : function 키워드,
// 이름으로 선언하는 함수는 호이스팅 영향 받음

console.log(sum(10,5))
function sum(p1,p2) {
    let sum = p1 + p2;
    return sum;
}


// JS의 함수를 선언할 때에는 
// 함수 선언문과 표현식으로 작성할 수 있음.

// 표현식 -> 변수에 함수를 할당, 호이스팅 영향 x
// 변수에 할당하는 함수에 식별자 있으면 네이밍(기명), 없으면 익명 함수

// 익명 함수
// 얘는 함수 자체를 가리키는거고 
// 위에서는 sum(21,24)라는 실행 값을 받아서 console에 찍은것
const gugudan = function() {
    // for(let i = 1; i < 10; i ++){
    //     console.log(`3 *  ${i} = ${3 * i}`);
        console.log(`구구단`);
    // }
}
gugudan();
// 일급 객체로 사용하기 위해서 사용한다고 하는데, 좀 더 알아볼 필요가 있음.
// 일단 그냥 익명함수로 함수에 이름을 넣어서 사용하는 함수같은 경우,
// 값을 변수에 받아 와서 호출해야 하기 때문에 디버그 할 때나 스택 추적에 불리하다고 한다.
// 하지만 호이스팅이 되기 때문에 선언 전에 호출이 가능하다는 장점도 있는 듯 하다.


// 화살표 함수
// ES6에서 추가된 선언 방법
const sum2 = (p1,p2) => {
    return p1 + p2;
}

console.log(sum2(1,2))

// 함수의 기본값 할당
function sum3(a = 10, b = 20){
    console.log(a + b);
}

sum3() // -> 30
sum3(100) // -> 120

// function sum3(a = 10, b) 로 돼있다면
// sum3(100) -> NaN 즉 오류는 나지 않음.
