// 스코프 : 범위
// 함수 스코프 : 함수에서 정의한 블록문만 스코프의 유효 범위로 인정하는 방식
// 즉 함수 스코프는 함수안에서만 의미. var은 함수 스코프 이기 때문에
// hoisting 될 때 함수의 맨위로만 가짐. 함수 바깥으론 안 가짐.
let a = 10;
function sum(x) {
    console.log(x+a);
}
sum(2);

function sum2(){
    let b = 15;
    console.log(b + 2);
}
sum2();

// 블록 스코프 : **S6에서 let, const 키워드가 추가되면서 블록 스코프도 지원**하게 되었습니다.
// 블록 스코프는 {}로 구성된 블록문 기준으로 스코프의 유효 범위
// let과 const는 블록의 맨위로. 블록 바깥으론 안나감.

let c = 10;
{
    var d = 20; 
    console.log(c, d);
}
console.log(c, d); 
// 위의 d 가 let이면 오류지만, var이면 오류가 안남.
// var은 함수 스코프(함수에서 정의하고 있는 스코프) 를 따르기 때문에 
// 그냥 블록은 스코프가 다르다는 것.
// ! 반복문과 조건문은 블록 스코프임!


// 중복 선언 우선순위
// 내부에 선언하면 내부의 새로 e와 f가 생기는것, 변수명이 똑같지만 다른 것.
// 그래서 내부에 있는것 우선순위로 블록 스코프 단위로 갖다 씀.
let e = 10;
const f = 20;
{
  let e = 50;
  const f = 70;
  console.log(`함수 내부 e: ${e}`);
  console.log(`함수 내부 f: ${f}`);
}  // 이렇게 블록 내부에서는 재선언 가능.


// 즉시 실행 함수
// 정의하고 즉시 실행
// 브라우저가 로딩 되자마자 바로 시작할 기능들이 있기에 그런것에 사용 용도가 될 수 있음
(function init(){
    //즉시 실행할 코드
    console.log("시작...")
}
)() //맨 뒤에 붙는 ()는 함수를 실행한다는 의미. 즉 sum() 처럼.